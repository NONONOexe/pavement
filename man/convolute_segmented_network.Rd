% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convolute-segmented-network.R
\name{convolute_segmented_network}
\alias{convolute_segmented_network}
\title{Convolute segmented road network}
\usage{
convolute_segmented_network(
  segmented_network,
  kernel = compute_epanechnikov,
  bandwidth = 3,
  use_esd = TRUE,
  correct_boundary_effects = TRUE,
  ...
)
}
\arguments{
\item{segmented_network}{A \code{segmented_network} object assigned with events.}

\item{kernel}{A kernel function to use for convolution (default is
Epanechnikov kernel).}

\item{bandwidth}{Numeric value representing the bandwidth for the kernel
function (default is 3).}

\item{use_esd}{If \code{TRUE}, considers branching in the kernel using the
Equal Split Discontinous kernel (ESD). ESD follows the method described in
Okabe et al., accounting for road intersections and ensuring that kernel
weights are correctly distributed across accross branches
(default is \code{TRUE}).}

\item{correct_boundary_effects}{If \code{TRUE}, corrects for boundary effects
by normalizing the kernel weights to account for kernel values outside
the network (default is \code{TRUE}).}

\item{...}{Additional arguments passed to the kernel function.}
}
\value{
The segmented network with updated link densities.
}
\description{
This function convolves a segmented network using a specified kernel
function, typically for traffic modeling or network analysis. It computes
weights densities based on the distance between links in the network and
the number of events assigned to each link. Optionally, it can adjust for
branching in the network.
}
\examples{
# Create a road network
road_network <- create_road_network(sample_roads)

# Assign sample accidents data
road_network <- set_events(road_network, sample_accidents)

# Segment the road network
segmented_network <- create_segmented_network(
  road_network,
  segment_length = 0.5
)

# Check the segmented road network after assigning events
segmented_network

# Apply the convolution to calculate link densities using
# the kernel function
convoluted_network <- convolute_segmented_network(segmented_network)

# Check the convoluted network with the computed densities
convoluted_network

# Plot the convoluted network showing the density distribution
plot(convoluted_network, mode = "density")
}
\references{
Okabe, A., Satoh, T., & Sugihara, K. (2009). A kernel density estimation
method for networks, its computational method and a GIS-based tool.
\emph{International Journal of Geographical Information Science}, 23(1),
7-32. \doi{10.1080/13658810802475491}
}
