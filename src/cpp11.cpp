// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// dijkstra_with_branches.cpp
cpp11::writable::list dijkstra_with_branches(const cpp11::list& adj, const cpp11::list& edge_weights, const cpp11::list& branch_degrees, int start_node_r, int n_nodes);
extern "C" SEXP _pavement_dijkstra_with_branches(SEXP adj, SEXP edge_weights, SEXP branch_degrees, SEXP start_node_r, SEXP n_nodes) {
  BEGIN_CPP11
    return cpp11::as_sexp(dijkstra_with_branches(cpp11::as_cpp<cpp11::decay_t<const cpp11::list&>>(adj), cpp11::as_cpp<cpp11::decay_t<const cpp11::list&>>(edge_weights), cpp11::as_cpp<cpp11::decay_t<const cpp11::list&>>(branch_degrees), cpp11::as_cpp<cpp11::decay_t<int>>(start_node_r), cpp11::as_cpp<cpp11::decay_t<int>>(n_nodes)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_pavement_dijkstra_with_branches", (DL_FUNC) &_pavement_dijkstra_with_branches, 5},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_pavement(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
